You are given an array a of length n and array b of length m both consisting of only integers 0 and 1. Consider a matrix c of size n×m formed by following rule: ci,j=ai⋅bj (i.e. ai multiplied by bj). It's easy to see that c consists of only zeroes and ones too.

How many subrectangles of size (area) k consisting only of ones are there in c?

A subrectangle is an intersection of a consecutive (subsequent) segment of rows and a consecutive (subsequent) segment of columns. I.e. consider four integers x1,x2,y1,y2 (1≤x1≤x2≤n, 1≤y1≤y2≤m) a subrectangle c[x1…x2][y1…y2] is an intersection of the rows x1,x1+1,x1+2,…,x2 and the columns y1,y1+1,y1+2,…,y2.

The size (area) of a subrectangle is the total number of cells in it.

Solution :

/*                	SOUVIK MAJI 
               JALPAIGURI GOVT. ENGG. COLLEGE
*/
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define dd double
#define pb push_back
#define ff first
#define ss second
#define Mp make_pair
#define endl "\n"
#define SIZE 1000000
#define fr(i,x,n) for(int i=x;i<=n-1;i++) 
#define rf(i,x,n) for(int i=n-1;i>=x;i--)
#define fio ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);

ll pwr(ll n,ll p)
{
    if (p==0) 
        return 1; 
    else if (p%2==0) 
        return pwr(n,p/2)*pwr(n,p/2); 
    else
        return n*pwr(n,p/2)*pwr(n,p/2);
}
ll hcf(ll a,ll b) 
{ 
    if(b==0) 
        return a; 
    return hcf(b,a%b);  
}
ll min(ll x,ll y){if(x<y) return x;return y;}
ll max(ll x,ll y){if(x>y) return x;return y;}

bool f(ll x,ll y) {return x>y;}

int main()
{
    fio
    ll n, m, k,z,f,p=0;
	cin>>n>>m>>k;
	ll a[n], b[m];
	for(int i=0;i<n;i++)
	cin>>a[i];
	for(int i=0;i<m;i++)
	cin>>b[i];
	ll a1[40005]={0},b1[40005]={0};
	ll i=0,j=0;
	while(i<n)
	{
		j = i;
		while(j<n)
		{
			if(a[j] == 0) 
			break;
			j++;
		}
		
		if(j != i)
		{
			 z = j - i;
			 p=z;
			 f = 1;
			for(ll x=z;x>0;x--)
			{
				a1[x]+=f;
				f++;
			}
		}
		
		i = j+1;
	}
	/*fr(i,1,p+1)
	{
	    cout<<a1[i]<<" ";
	}
	cout<<endl;*/
	
	i=j=0;
	p=0;
	while(i<m)
	{
		j = i;
		while(j<m)
		{
			if(b[j] == 0) 
			break;
			j++;
		}
		
		if(j != i)
		{
			 z=j-i;
			 p=z;
			 f=1;
			for(ll x=z;x>0;x--)
			{
				b1[x]+=f;
				f++;
			}
		}
		
		i = j+1;
	}
	/*fr(i,1,p+1)
	{
	    cout<<b1[i]<<" ";
	}
	cout<<endl;*/
	
	ll ans = 0;
	for(int x=1; x<=sqrt(k); x++)
	{
		if(k%x == 0) {
			int y = k/x;
			if(max(x, y) <= max(n, m))
			{
				//cout<<x<<"-"<<y<<endl;
				ans += (a1[x] * b1[y]);
				if(x != y) 
				ans +=(a1[y] * b1[x]);
				//cout<<ans<<"-";
			}
		}
	}
	
	cout<<ans<<endl;
	return 0;
}
