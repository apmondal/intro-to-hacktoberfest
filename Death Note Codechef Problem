Chef Ciel got enormous cooking power from the Evil Book. Instead, Ciel must devote 666 magical power to the Evil Book.

Other than Ciel, there are N chefs in the world. The i-th chef has Ci cooking power and Mi magical power. Ciel may get Mi magical power by defeating the i-th chef in a cooking battle, which needs Ci effort. After that, the i-th chef's magical power Mi becomes 0.

The Evil Book can help her, if she gives X magical power to the Evil Book. That is, by consuming X magical power, she can choose some i and multiply by 1/3 both the i-th chef's cooking power Ci and his magical power Mi. Note that she can't take the help of the Evil Book unless she has at least X magical power.

Firstly, Ciel has no magical power. What's the minimum total effort for collecting at least 666 magical power?

Solution:

#include<iostream>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<cstdio>
using namespace std;
int c[20],m[20],n,X,pd[20];
double rem,ans;
const double eps=1e-9;
void findans(int k1,int pre,double k2,double k3,double k4){
	if (k3>666-eps){
		ans=min(ans,k4); return;
	}
	if (k3+rem/k2<666-eps) return;
	if (k3<k1*X-eps) return;
	if (k4>ans) return;
	for (int i=pre;i<=n;i++)
		if (pd[i]==0&&k1*X<m[i]/k2){
			pd[i]=1; rem-=m[i];
			findans(k1,i+1,k2,k3-k1*X+m[i]/k2,k4+c[i]/k2);
			pd[i]=0; rem+=m[i];
		}
	findans(k1+1,1,k2*3,k3,k4);
}
void solve(){
	scanf("%d%d",&n,&X); rem=0;
	for (int i=1;i<=n;i++) scanf("%d%d",&c[i],&m[i]);
	for (int i=1;i<=n;i++) rem+=m[i];
	if (rem<666) {printf("impossible\n"); return;}
	ans=1e18;
	findans(0,1,1,0,0);
	printf("%.0lf\n",ans);
}
int main(){
	int t; scanf("%d",&t);
	for (;t;t--) solve();
	return 0;
}
